<?php

namespace App\Controller;

use App\Entity\Issue;
use App\Entity\Operator;
use App\Entity\User;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

class NotificationController extends AbstractController
{
    /**
     * @Route("admin/notification", name="notification_index")
     */
    public function index()
    {

        $operators = $this->getDoctrine()->getRepository(Operator::class)->getOperatorWithNonNotifiedIssues();


        return $this->render('admin/notification/index.html.twig', [
            'operators' => $operators,
        ]);
    }

    /**
     * @Route("admin/notification/send-{id}", name="notification_send", methods="POST")
     *
     * @param Request $request
     * @param Operator $operator
     * @param \Swift_Mailer $mailer
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     * @throws \Exception
     */
    public function sendNotification(Request $request, Operator $operator, \Swift_Mailer $mailer)
    {

//get the token generated by twig form
        $submitedToken = $request->request->get('token');

        if ($this->isCsrfTokenValid('send-notification', $submitedToken)) {

            //get operator with only non notified issues from user repository
            $myOperator = $this->getDoctrine()->getRepository(Operator::class)->getOneOperatorWithNonNotifedIssues($operator);


            foreach ($myOperator->getUsers() as $user) {
                $persons[ $user->getEmail()] = $user->getFirstname() . ' ' . $user->getLastname();

            }

            //get all technicians
            $technicians = $this->getDoctrine()->getRepository(User::class)->getTechnicians();

            $emails = [];
            //get all emails from technicians
            foreach ($technicians as $technician) {
                $emails[] = $technician->getEmail();
            }

            //mail message
            $message = (new \Swift_Message('Equipements prêts, remplacement imminent'))
                ->setFrom('send@exemple.com')
                ->setTo($persons)
                ->setCc($technicians)
            ;

            $myLogo = $message->embed(\Swift_Image::fromPath('img/om.png'));

            $message->setBody(
                $this->renderView(
                    'admin/notification/email.html.twig',
                    [
                        'operator' => $myOperator,
                        'image' => $myLogo

                    ]
                ), 'text/html'
            );

            //generate pdf delivery form


            $mailer->send($message);

            //set the current date to dateMessage
            $date = new \DateTime();

            foreach ($myOperator->getUsers() as $user){

                foreach ($user->getissues() as $issue) {
                    $issue->setDateMessage($date);

                }
            }

        $this->getDoctrine()->getManager()->flush();
        $this->addFlash('success', 'La notification a été envoyée');
    }

        return $this->redirectToRoute('notification_index');
    }


}
